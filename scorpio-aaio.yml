# WARNING: Do not deploy this tutorial configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components
# are running at full debug and extra ports have been exposed to allow for direct calls to services.
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on.
#
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on,
# not use directly.
#
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
#
# see: https://github.com/FIWARE/helm-charts/
#
version: "3.5"

services:
  zookeeper:
    image: zookeeper
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - default
    ports:
      - "2181"
  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    container_name: kafka
    networks:
      - default
    ports:
      - "9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  postgres:
    image: mdillon/postgis
    hostname: postgres
    container_name: db-postgres
    networks:
      - default
    ports:
      - "5432"
    environment:
      POSTGRES_USER: ngb
      POSTGRES_PASSWORD: ngb
      POSTGRES_DB: ngb

  scorpio:
    image: scorpiobroker/scorpio:scorpio-aaio-no-eureka_latest
    hostname: scorpio
    container_name: fiware-scorpio
    networks:
      - default
    ports:
      - "9090:9090"
    depends_on:
      - kafka
      - postgres
    healthcheck:
      test: curl --fail -s http://scorpio:9090/scorpio/v1/info/ || exit 1

  test-subscription:
    image: test-registration
    hostname: test-registration
    container_name: test-registration
    networks:
      - default
    ports:
      - "3000"
  ngsi-ldes:
    image: brechtvdv/ngsi-ldes
    ports:
      - "3001:3001"
    depends_on:
      - scorpio
    networks:
      - default
    environment:
      # Location of the NGSI-LD endpoint
      NGSI_HOST: "http://scorpio:9090/ngsi-ld/v1"
      # types that the broker contains (will be removed when /types discovery is supported) quotes voor linux bij meerdere types.
      NGSI_TYPES: "https://uri.fiware.org/ns/data-models#Device https://uri.fiware.org/ns/data-models#DeviceModel https://uri.fiware.org/ns/data-models#WaterQualityObserved"
      # Use timeAt and endTimeAt (v1.3.1) instead of time and endTime
      NGSI_USETIMEAT: "true"
      NGSI_USECOUNTISTRUE: "true"
      # timeProperty (should be modifiedAt or observedAt)
      NGSI_TIMEPROPERTY: "modifiedAt"
      # OpenID config
      NGSI_ISAUTHENTICATED: "false"
      SERVER_BASE_URL: "http://localhost:3001/"
      SERVER_PORT : "3001"
      PUBLIC_BASE_URL: "http://localhost:3001/"
      # Limit to use and the number of entities per fragment
      API_LIMIT: "5"
      # Output KeyValues representation
      API_KEYVALUES: "true"


networks:
  default: ~
